BUGS and CLEANUP:
- Proper Hcore guess for UHF/UKS. Lithium problem.
- d-functions complete, f-functions and beyond TODO
- print minimal basis specification: primitive list
- print basis set order also
- Print full basis set option
- Implement density gradient, sigma, including dAO so that we can have GGA functionals
- Cleanup Fock_loop_sparse_UHF (comment out and multiply)
- Cleanup NonHybridDFT_RKS (comment out and multiply)
- DIIS: better throwout-vector scheme
- Unify DIIS, Damping and Levelshift switching


FEATURES
- Parallelize Fock with threading
- Parallelize density formation. Grid formation?
- To go beyond C7-alkane with RHF/def2-SVP:
  - DF
  - Direct SCF
- EDIIS+DIIS or Optimal damping algorithm (ODA)
- Parallelization : threading
- Write/read functionality for a wavefunction file. Use for guess="read" in jHF
  and also for standalone plot_MO/plot_density functions.
  Options:
  - LÃ¶wdin pop
  - DelimitedFiles ?
  - JLD2: https://github.com/JuliaIO/JLD2.jl  (JLD : https://github.com/JuliaIO/JLD.jl,  maintanenance mode)
  - BSON: https://github.com/JuliaIO/BSON.jl (binary JSON)
  - JSON3: https://github.com/quinnj/JSON3.jl  (text)

  https://discourse.julialang.org/t/how-to-save-and-read-a-structure/71031/20

- Wfn file format standards:
 - https://gaussian.com/interfacing/
 - https://github.com/theochem/iodata/pull/178
 - https://chemrxiv.org/engage/api-gateway/chemrxiv/assets/orp/resource/item/61cc3d33d1f662f9ec491b32/original/mwfn-a-strict-concise-and-extensible-format-for-electronic-wavefunction-storage-and-exchange.pdf

- Option to write Cube file for MOs and densities.
- Prescreening: libcint should already do standard integral prescreening (Schwarz or similar).
   Todo: add density-matrix*integral product prescreening ?
- Add dashed line below occupied orbitals in MO energy output or label HOMO
- Finish F,P,C matrix writing for UHF per iteration and cleanup in general
- Better guess than Hcore. PModel or Patom? Whatever is easier
- Support broken-symmetry wavefunction
- Dipole moment
- Add colors as optional in output
- electric field gradient
- LibXC interface: https://github.com/JuliaMolSim/Libxc.jl
- DFT grids. Interface to library? 
    - https://github.com/dftlibs/numgrid
    - https://github.com/stefabat/Lebedev.jl
- Read-in basis: Normalize contraction coefficients
- Gradient?
- TDDFT?
- Test Libint library also via Lints: https://github.com/FermiQC/Lints.jl
- GPU options:
    - https://nextjournal.com/sdanisch/julia-gpu-programming
    - https://pretalx.com/juliacon2021/talk/VK87Q3/
    - https://pretalx.com/juliacon2021/talk/VK87Q3/
    - https://github.com/JuliaGPU/ArrayFire.jl
    - https://github.com/JuliaGPU/GPUArrays.jl
    - NVIDIA: https://github.com/JuliaGPU/CUDA.jl